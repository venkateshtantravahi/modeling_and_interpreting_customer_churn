name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true


jobs:
  lint_and_precommit:
    name: Lint & Pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
            ruff.toml

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then python -m pip install -r requirements-dev.txt; else python -m pip install pre-commit ruff; fi

      - name: Install package (editable)
        run: python -m pip install -e .

      - name: Pre-commit (all files on CI)
        run: |
          pre-commit run --all-files

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint_and_precommit
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(vars.PY_VERSIONS) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
            ruff.toml

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then python -m pip install -r requirements-dev.txt; else python -m pip install pytest pytest-cov; fi

      - name: Install package (editable)
        run: python -m pip install -e .

      - name: Pytest
        run: |
          pytest -q --maxfail=1 --disable-warnings \
          --cov=src --cov-report=xml --cov-report=term-missing


      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

  data_quality:
    name: Data Quality Checks
    runs-on: ubuntu-latest
    needs: tests
    env:
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
            ruff.toml

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          python - <<'PY'
          import sys, subprocess
          # tiny set to run fast â€” expand later if your script needs more
          for r in ["pandas", "pyarrow", "pandera>=0.20.3", "kaggle"]:
              subprocess.check_call([sys.executable, "-m", "pip", "install", r])
          PY

      - name: Download Kaggle data
        if: ${{ env.KAGGLE_USERNAME != '' && env.KAGGLE_KEY != '' }}
        run: |
          mkdir -p ~/.kaggle
          printf '{"username":"%s","key":"%s"}' "$KAGGLE_USERNAME" "$KAGGLE_KEY" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          mkdir -p data/raw
          kaggle datasets download -d imsparsh/churn-risk-rate-hackerearth-ml -p data/raw --unzip

      - name: Detect dataset presence
        id: find_data
        run: |
          shopt -s nullglob
          files=(data/raw/*.csv tests/data/*.csv)
          if [ ${#files[@]} -gt 0 ]; then
            echo "has_data=true" >> $GITHUB_OUTPUT
            echo "Found data files: ${files[@]}"
          else
            echo "has_data=false" >> $GITHUB_OUTPUT
            echo "No data files found (data/raw/*.csv or tests/data/*.csv)"
          fi

      - name: Run data quality checks
        if: steps.find_data.outputs.has_data == 'true'
        run: python scripts/data_checks.py
